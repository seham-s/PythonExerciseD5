class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class BinaryTree:
    def __init__(self, root=None):
        self.root = TreeNode(root) if root is not None else None

    def insert(self, val):
        if not self.root:
            self.root = TreeNode(val)
        else:
            self._insert(val, self.root)

    def _insert(self, val, current_node):
        if val < current_node.val:
            if current_node.left:
                self._insert(val, current_node.left)
            else:
                current_node.left = TreeNode(val)
        elif val > current_node.val:
            if current_node.right:
                self._insert(val, current_node.right)
            else:
                current_node.right = TreeNode(val)
        else:
            print("Value already in tree")

    def search(self, val):
        current_node = self.root
        while current_node:
            if val < current_node.val:
                current_node = current_node.left
            elif val > current_node.val:
                current_node = current_node.right
            else:
                return True
        return False

    def postorder_traversal(self):
        return self._postorder_traversal(self.root)
    
    def _postorder_traversal(self, current_node):
        values = []
        if current_node:
            values += self._postorder_traversal(current_node.left)
            values += self._postorder_traversal(current_node.right)
            values.append(current_node.val)
        return values

# Usage example
binary_tree = BinaryTree(5)
binary_tree.insert(3)
binary_tree.insert(7)
binary_tree.insert(2)
binary_tree.insert(4)
binary_tree.insert(6)
binary_tree.insert(8)

# Postorder traversal
print(binary_tree.postorder_traversal())